/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/find/document": {
    /** Search data into the catalog. */
    get: operations["findDocument"];
  };
}

export interface components {
  schemas: {
    // Problem: external["https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/schemas/problem.yaml"]["Problem"];
    /** Geoportal response. */
    Response: {
      title?: string;
      description?: string;
      copyright?: string;
      updated?: string;
      records?: components["schemas"]["Record"][];
    };
    /** Geometry schema */
    Geometry: {
      coordinates?: unknown[];
      type?: string;
    };
    /** The root of the Links type's schema. */
    Links: {
      href?: string;
      type?: string;
      labelKey?: string;
    };
    /** The root of the PointOfContactOfData type's schema. */
    PointOfContactOfData: {
      name: string;
      email?: string;
      phone?: string;
    };
    /** The root of the Record type's schema. */
    Record: {
      title?: string;
      id?: string;
      updated?: string;
      summary?: string;
      hierarchyLevel?: string;
      responsibleOfData?: string;
      pointOfContactOfData: components["schemas"]["PointOfContactOfData"];
      keywords?: string[];
      bbox: number[];
      geometry: components["schemas"]["Geometry"];
      links?: components["schemas"]["Links"][];
    };
  };
  // responses: {
  //   '400BadRequest': external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/responses/v3.yaml']['400BadRequest'];
  //   '404NotFound': external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/responses/v3.yaml']['404NotFound'];
  //   '429TooManyRequests': external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/responses/v3.yaml']['429TooManyRequests'];
  //   '503ServiceUnavailable': external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/responses/v3.yaml']['503ServiceUnavailable'];
  //   default: external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/responses/v3.yaml']['default'];
  // };
  // parameters: {
  //   limit: external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/parameters/v3.yaml']['limit'];
  //   offset: external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/parameters/v3.yaml']['offset'];
  //   sort: external['https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/parameters/v3.yaml']['sort'];
  // };
  headers: {};
}

export interface operations {
  /** Search data into the catalog. */
  findDocument: {
    parameters: {
      query: {
        /**
         * Query by extent specified as two pairs of coordinates (west-south and east-north).
         * Comma-delimited string of integers between -180,180 and -90, 90.
         */
        bbox?: number[];
        /**
         * Query by spatial relationship. Used in conjunction with bbox parameter.
         * example: esriSpatialRelWithin
         */
        spatialRel?: string;
        /**
         * Query by keyword. String value representing a keyword.
         * Note, as of version 1.1.1, you can use searchText=sys.schema.key to query
         * for documents that correspond to a specific metadata schema.
         *
         * Eg:
         * ```
         * curl https://geodati.gov.it/RNDT/rest/find/document?searchText=INSPIRETheme:Idrografia&start=1&max=5&f=pjson
         * ```
         *
         * For an exact match use double quotes. For example, see the syntax for two terms, `carta` and `geologica`:
         *
         * - Exact: `searchText=title:"carta geologica"`
         * - Any: `searchText=title:carta geologica`
         * - All: `searchText=title:carta AND geologica`
         *
         * example: `searchText=INSPIRETheme:Idrografia`
         */
        searchText?: string;
        /** @deprecated Keyword concatenation options. This parameter is obsolete with the Lucene syntax (see Using Lucene Search Text Queries). */
        contains?: string;
        /**
         * Query by content type.  String value representing an Esri content type. See Javadoc for complete list.
         * example: TODO
         */
        contentType?: string;
        /**
         * Query by data category (ISO 19115 themes).
         * Comma-delimited list of strings. Keywords identified by the ISO 19115 specification. See JavaDoc for complete list.
         */
        dataCategory?: string[];
        /**
         * Query by date.
         * example: "2014-12-30"
         */
        after?: string;
        /**
         * Query by date.
         * example: "2014-12-30"
         */
        before?: string;
        /** Result sort options. */
        orderBy?: string;
        /**
         * Specify which item to start the response with out of the entire resultset.
         * When used with the max parameter, this provides for pagination of the search results.
         */
        start?: number;
        /**
         * Specify max number of records to retrieve.
         * There is a limit of max=100 on unqualified queries.
         * An 'unqualified query' is when there are no search parameters set.
         * The limit on qualified queries is max=5000. Default: 10.
         *  When used with the start parameter, this provides for pagination of the search results.
         */
        max: number;
        /** Defines how spatial data will be represented. */
        geometryType?: string;
        /** the response format. */
        f?: string;
        /**
         * CSS stylesheet for HTML results.
         * String value representing a URL to a stylesheet.
         */
        style?: string;
        /** Behavior of links (open in same or new window). */
        target?: string;
        /**
         * Id associated with the repository. Multiple rid parameters
         * are allowed for comparing results between different repositories.
         */
        rid?: string;
        /** Comma Delimited rid. Can be used instead of the multiple rid parameters. */
        rids?: string;
        /** Maximum amount of time allowed to retrieve results. */
        maxSearchTimeMilliSec?: number;
        /** Can apply a persistent filter to the search interface. See URL Filter Customization */
        filter?: string;
      };
    };
    responses: {
      /** A list of datasources. */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      // 400: components['responses']['400BadRequest'];
      // 404: components['responses']['404NotFound'];
      // 429: components['responses']['429TooManyRequests'];
      // 503: components['responses']['503ServiceUnavailable'];
      // default: components['responses']['default'];
    };
  };
}

export interface external {
  "https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/headers/v3.yaml": {
    paths: {};
    components: {};
    operations: {};
  };
  "https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/parameters/v3.yaml": {
    paths: {};
    components: {};
    operations: {};
  };
  "https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/responses/v3.yaml": {
    paths: {};
    components: {};
    operations: {};
  };
  "https://raw.githubusercontent.com/teamdigitale/openapi/0.0.2/docs/schemas/problem.yaml": {
    paths: {};
    components: {};
    operations: {};
  };
}
